##################################################
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞–∏–±–æ–ª–µ–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã—Ö –º–æ–Ω–µ—Ç –Ω–∞ Binance
#
# –ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
# pip install rich aiohttp
#
# –°–∫—Ä–∏–Ω—à–æ—Ç: https://github.com/user-attachments/assets/b22838f6-a130-4ffe-9f01-d09abbcc24cc
#
# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
# –ù–∞–π—Ç–∏ –º–æ–Ω–µ—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –Ω–∞ 2% –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é 1 –º–∏–Ω—É—Ç—É –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 15 –º–∏–Ω—É—Ç–∞–º–∏
# python hotcold.py 2% 1m 15m
#
# –î–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä --watch
# python hotcold.py 2% 1m 15m --watch
#
# –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
# - –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ä—ã —Å USDT –Ω–∞ Binance Futures –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Ü–µ–Ω—ã.
# - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø 5 –º–æ–Ω–µ—Ç, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã—Ä–æ—Å–ª–∏, –∏ —Ç–æ–ø 5, –∫–æ—Ç–æ—Ä—ã–µ —É–ø–∞–ª–∏.
# - –†–µ–∂–∏–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (--watch).
# - –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
##################################################

import asyncio
import aiohttp
import argparse
from typing import List, Dict, Any
from rich.console import Console
from rich.table import Table
from rich.live import Live
from rich.align import Align
from rich.style import Style
from datetime import datetime

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Rich Console
console = Console()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã Binance Futures API
EXCHANGE_INFO_URL = 'https://fapi.binance.com/fapi/v1/exchangeInfo'
KLINES_URL = 'https://fapi.binance.com/fapi/v1/klines'

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
SEMAPHORE = asyncio.Semaphore(20)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ 20 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, –≤ —Ç–µ—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä—ã—Ö –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –º–æ–Ω–µ—Ç—ã
DISPLAY_DURATION = 2  # –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ –≤–∞—à–µ–º—É –∂–µ–ª–∞–Ω–∏—é

async def fetch_json(session: aiohttp.ClientSession, url: str, params: Dict[str, Any]) -> Any:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç GET-–∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON-–æ—Ç–≤–µ—Ç.
    """
    try:
        async with SEMAPHORE:
            async with session.get(url, params=params, ssl=False, timeout=10) as response:
                if response.status != 200:
                    return None
                return await response.json()
    except Exception:
        return None

async def get_usdt_symbols(session: aiohttp.ClientSession) -> List[str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ—Ä–≥—É–µ–º—ã—Ö –∑–∞ USDT –Ω–∞ Binance Futures.
    """
    data = await fetch_json(session, EXCHANGE_INFO_URL, {})
    if data is None:
        return []
    symbols = [s['symbol'] for s in data['symbols'] if s['quoteAsset'] == 'USDT' and s['status'] == 'TRADING']
    return symbols

def parse_percentage(pct_str: str) -> float:
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∫–∞–∫ float.
    """
    try:
        return float(pct_str.strip('%'))
    except ValueError:
        return 10.0

def parse_interval(interval_str: str) -> str:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è Binance API.
    """
    valid_intervals = [
        '1m', '3m', '5m', '15m', '30m',
        '1h', '2h', '4h', '6h', '8h',
        '12h', '1d', '3d', '1w', '1M'
    ]
    return interval_str if interval_str in valid_intervals else '1h'

def interval_to_minutes(interval: str) -> int:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ Binance –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç.
    """
    mapping = {
        '1m': 1,
        '3m': 3,
        '5m': 5,
        '15m': 15,
        '30m': 30,
        '1h': 60,
        '2h': 120,
        '4h': 240,
        '6h': 360,
        '8h': 480,
        '12h': 720,
        '1d': 1440,
        '3d': 4320,
        '1w': 10080,
        '1M': 43200  # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ 30 –¥–Ω–µ–π
    }
    return mapping.get(interval, 0)

def get_sub_interval_and_candles(interval: str) -> (str, int):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–¥—ã–Ω—Ç–µ—Ä–≤–∞–ª –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.
    """
    interval_minutes = interval_to_minutes(interval)
    if interval_minutes == 0:
        return ('1m', 1)

    if interval_minutes >= 43200:  # 1 –º–µ—Å—è—Ü –∏–ª–∏ –±–æ–ª—å—à–µ
        sub_interval = '1d'
    elif interval_minutes >= 10080:  # 1 –Ω–µ–¥–µ–ª—è –∏–ª–∏ –±–æ–ª—å—à–µ
        sub_interval = '4h'
    elif interval_minutes >= 1440:  # 1 –¥–µ–Ω—å –∏–ª–∏ –±–æ–ª—å—à–µ
        sub_interval = '1h'
    elif interval_minutes >= 60:  # 1 —á–∞—Å –∏–ª–∏ –±–æ–ª—å—à–µ
        sub_interval = '5m'
    else:
        sub_interval = '1m'

    sub_interval_minutes = interval_to_minutes(sub_interval)
    num_candles = interval_minutes // sub_interval_minutes
    num_candles = max(1, num_candles)

    return (sub_interval, num_candles)

async def analyze_symbol(session: aiohttp.ClientSession, symbol: str, current_interval: str, prev_interval: str) -> Dict[str, Any]:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞, –∏—Å–ø–æ–ª—å–∑—É—è —É–ª—É—á—à–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–Ω–æ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–æ–ª—å—à–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è.
    """
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        current_sub_interval, current_num_candles = get_sub_interval_and_candles(current_interval)
        if current_num_candles <= 0:
            return {}

        current_klines = await fetch_json(session, KLINES_URL, {
            'symbol': symbol,
            'interval': current_sub_interval,
            'limit': current_num_candles
        })
        if not current_klines:
            return {}

        current_high_prices = [float(kline[2]) for kline in current_klines]  # High prices
        current_low_prices = [float(kline[3]) for kline in current_klines]   # Low prices
        max_current_price = max(current_high_prices)
        min_current_price = min(current_low_prices)

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥—ã–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–≤–µ—á–µ–π –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        prev_sub_interval, prev_num_candles = get_sub_interval_and_candles(prev_interval)
        if prev_num_candles <= 0:
            return {}

        # –ó–∞–ø—Ä–æ—Å —Å–≤–µ—á–µ–π –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        prev_klines = await fetch_json(session, KLINES_URL, {
            'symbol': symbol,
            'interval': prev_sub_interval,
            'limit': prev_num_candles
        })
        if not prev_klines:
            return {}

        prev_high_prices = [float(kline[2]) for kline in prev_klines]  # High prices
        prev_low_prices = [float(kline[3]) for kline in prev_klines]   # Low prices
        max_prev_price = max(prev_high_prices)
        min_prev_price = min(prev_low_prices)
        avg_prev_price = sum(prev_high_prices) / len(prev_high_prices)
        biased_prev_price = avg_prev_price + (max_prev_price - avg_prev_price) * 0.5  # –°–º–µ—â–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ

        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —Ä–æ—Å—Ç–∞ –∏ –ø–∞–¥–µ–Ω–∏—è
        pct_change_up = ((max_current_price - biased_prev_price) / biased_prev_price) * 100
        pct_change_down = ((min_current_price - biased_prev_price) / biased_prev_price) * 100

        # –í—ã–±–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –≤–µ–ª–∏—á–∏–Ω–æ–π
        if abs(pct_change_up) >= abs(pct_change_down):
            change = pct_change_up
        else:
            change = pct_change_down

        return {
            'symbol': symbol,
            'change': change,
            'current_price': max_current_price if change >= 0 else min_current_price,
            'prev_price': biased_prev_price
        }
    except Exception:
        return {}

def create_table(sorted_symbols: List[Dict[str, Any]], top_rising_symbols: List[str], top_falling_symbols: List[str], change_threshold: float, last_updated: str) -> Table:
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–º—É –∏–∑–º–µ–Ω–µ–Ω–∏—é.
    """
    table = Table(title=f"–í–æ–ª–∞—Ç–∏–ª—å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã USDT (–û–±–Ω–æ–≤–ª–µ–Ω–æ: {last_updated})")
    table.add_column("–°–∏–º–≤–æ–ª", style="cyan", no_wrap=True)
    table.add_column("–ò–∑–º–µ–Ω–µ–Ω–∏–µ (%)", style="magenta")
    table.add_column("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞", style="green")
    table.add_column("–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Ü–µ–Ω–∞", style="green")

    for res in sorted_symbols:
        symbol = res['symbol']
        change = res['change']
        current_price = res['current_price']
        prev_price = res['prev_price']

        if symbol in top_rising_symbols and change >= change_threshold:
            symbol_display = f"üî• {symbol}"
            change_display = f"[green]{change:.2f}[/green]"
        elif symbol in top_falling_symbols and change <= -change_threshold:
            symbol_display = f"‚ùÑÔ∏è {symbol}"
            change_display = f"[red]{change:.2f}[/red]"
        else:
            symbol_display = symbol
            change_display = f"[grey70]{change:.2f}[/grey70]"

        table.add_row(
            symbol_display,
            change_display,
            f"{current_price}",
            f"{prev_price:.4f}"
        )

    return table

async def main(change_threshold: float, current_interval: str, prev_interval: str, watch: bool, watch_interval: float):
    """
    –ì–ª–∞–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è.
    """
    console.print("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤...")
    async with aiohttp.ClientSession() as session:
        symbols = await get_usdt_symbols(session)
        if not symbols:
            console.print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            return

        console.print(f"–ù–∞–π–¥–µ–Ω–æ {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤ —Å USDT.")
        console.print("–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑...")

        tracked_symbols = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ –∏ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π

        with Live(console=console, refresh_per_second=1) as live:
            while True:
                start_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                tasks = [analyze_symbol(session, symbol, current_interval, prev_interval) for symbol in symbols]
                results = await asyncio.gather(*tasks)
                results = [res for res in results if res]

                if results:
                    # –û—Ç–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —Ä–æ—Å—Ç –∏ –ø–∞–¥–µ–Ω–∏–µ
                    rising_results = [res for res in results if res['change'] >= change_threshold]
                    falling_results = [res for res in results if res['change'] <= -change_threshold]

                    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–º—É –∏–∑–º–µ–Ω–µ–Ω–∏—é
                    top_rising = sorted(rising_results, key=lambda x: x['change'], reverse=True)[:5]
                    top_falling = sorted(falling_results, key=lambda x: x['change'])[:5]

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã, –≤–æ—à–µ–¥—à–∏–µ –≤ —Ç–æ–ø-—Ä–∞—Å—Ç—É—â–∏–µ –∏ —Ç–æ–ø-–ø–∞–¥–∞—é—â–∏–µ
                    top_rising_symbols = [res['symbol'] for res in top_rising]
                    top_falling_symbols = [res['symbol'] for res in top_falling]

                    # –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
                    total_needed = 10
                    current_total = len(top_rising) + len(top_falling)
                    if current_total < total_needed:
                        remaining = [res for res in results if res['symbol'] not in top_rising_symbols and res['symbol'] not in top_falling_symbols]
                        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º—É –∏–∑–º–µ–Ω–µ–Ω–∏—é
                        remaining_sorted = sorted(remaining, key=lambda x: abs(x['change']), reverse=True)
                        needed = total_needed - current_total
                        other_symbols = remaining_sorted[:needed]
                    else:
                        other_symbols = []

                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã
                    final_symbols = top_rising + top_falling + other_symbols

                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–º—É –∏–∑–º–µ–Ω–µ–Ω–∏—é
                    sorted_final_symbols = sorted(final_symbols, key=lambda x: x['change'], reverse=True)

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                    new_tracked_symbols = {}
                    for res in final_symbols:
                        symbol = res['symbol']
                        if abs(res['change']) >= change_threshold:
                            new_tracked_symbols[symbol] = DISPLAY_DURATION
                    # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–Ω–µ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                    for symbol in tracked_symbols:
                        if symbol not in new_tracked_symbols:
                            if tracked_symbols[symbol] > 1:
                                new_tracked_symbols[symbol] = tracked_symbols[symbol] - 1
                    tracked_symbols = new_tracked_symbols

                    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                    table = create_table(sorted_final_symbols, top_rising_symbols, top_falling_symbols, change_threshold, start_time)
                else:
                    table = Table(title=f"–í–æ–ª–∞—Ç–∏–ª—å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã USDT (–û–±–Ω–æ–≤–ª–µ–Ω–æ: {start_time})")
                    table.add_column("–°–∏–º–≤–æ–ª", style="cyan", no_wrap=True)
                    table.add_column("–ò–∑–º–µ–Ω–µ–Ω–∏–µ (%)", style="magenta")
                    table.add_column("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞", style="green")
                    table.add_column("–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Ü–µ–Ω–∞", style="green")
                    table.add_row("-", "-", "-", "-")

                live.update(Align.center(table))

                if not watch:
                    break

                await asyncio.sleep(watch_interval)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='–ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω –º–æ–Ω–µ—Ç USDT –Ω–∞ Binance Futures.')
    parser.add_argument('percentage', nargs='?', default='10%', help='–ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10%)')
    parser.add_argument('current_interval', nargs='?', default='1m', help='–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1m, 15m, 1h)')
    parser.add_argument('prev_interval', nargs='?', default='15m', help='–ü—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15m, 1h)')
    parser.add_argument('--watch', action='store_true', help='–†–µ–∂–∏–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞')
    parser.add_argument('--interval', type=float, default=5.0, help='–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 —Å–µ–∫—É–Ω–¥)')

    args = parser.parse_args()

    change_threshold = parse_percentage(args.percentage)
    current_interval = parse_interval(args.current_interval)
    prev_interval = parse_interval(args.prev_interval)
    watch = args.watch
    watch_interval = args.interval

    try:
        asyncio.run(main(change_threshold, current_interval, prev_interval, watch, watch_interval))
    except KeyboardInterrupt:
        console.print("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
